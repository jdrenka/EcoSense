<!DOCTYPE html>
<html>
<head>
    <!-- Standard favicon -->
    <link rel="icon" type="image/png" sizes="32x32" href="images/Ecosense_Icon.png">
    <link rel="icon" type="image/png" sizes="16x16" href="images/Ecosense_Icon.png">

    <!-- Apple Touch Icon for iOS -->
    <link rel="apple-touch-icon" sizes="180x180" href="images/Ecosense_Icon.png">

    <!-- Android Chrome -->
    <link rel="icon" type="image/png" sizes="192x192" href="images/Ecosense_Icon.png">

    <!-- Safari pinned tab icon -->
    <link rel="mask-icon" href="images/Ecosense_icon.png" color="#5bbad5">
    <title>EcoSense</title>
    <link rel='stylesheet' href='/styles.css'>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .rowentrydata span {
            margin-right: 20px; /* Adjust the spacing as needed */
        }
    </style>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Jersey+25&family=Lobster&family=Lobster+Two:ital@1&family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
</head>
<body>
    <div class = 'topheader'>

        <a class='smallatag' href='/sensorview'>
            <h1 class='jersey-25-regular'><span class='withinlogo'>eco</span>Sense</h1>
        </a>
        <div class='navbar'>
       
            <button id='sensorviewbutton' class='navbuttons'>Sensors</button>
            <button id='createthreshold_button' class='navbuttons'>Alerts</button>
            <button id='helpbutton' class='navbuttons'>Help</button>
            <button class='navbuttons' id='logoutbutton'>Logout</button>
            <div class="triangle-cutout"></div>
        </div>

    </div>
    <div class='sensorlistheader'>
        <h1 class='text' id='sensorlistmessage'>Your Sensors:</h1>
        <button id='addSensorButton' class='navbuttons'>Add Sensor</button>
    </div>

    <div class='column-headers'>
        <div id = 'firstcolumn-header'>Sensor Name</div>
        <div>Sensor Type</div>
        <div>Current Readings</div>
        <div></div>
    </div>  

    <div class='innerlistview'>
        <% sensors.forEach(function(sensor) { %>
        <div class='listrowentry' data-sensor-id="<%= sensor.sid %>">
            <a href="/sensorDash?sensorId=<%= sensor.sid %>">
                <h1 class='rowicon' id="status-<%= sensor.sid %>">💤</h1>
                <h1 class='rowentrydata' id = 'sensname'><%= sensor.sname %></h1>
                <h1 class='rowentrydata' id = 'senstype'><%= sensor.stype %></h1>
                <h1 class='rowentrydata' id="reading-<%= sensor.sid %>">--</h1>
            </a>
        </div>
        <% }); %>
        <div class='whiteline'></div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const sensorViewButton = document.getElementById('sensorviewbutton');
        const alertViewButton = document.getElementById('createthreshold_button');
        const logoutButton = document.getElementById('logoutbutton');

        sensorViewButton.addEventListener('click', function() {
            window.location.href = '/sensorview';
        });

        alertViewButton.addEventListener('click', function() {
            window.location.href = '/alertView';
        });

        logoutButton.addEventListener('click', function() {
            window.location.href = '/logout';
        });

        const fetchLatestReadings = () => {
            fetch('/latest-readings')
                .then(response => response.json())
                .then(data => {
                    const currentTime = new Date(new Date().getTime() - (24 * 60 * 60 * 1000)); //Go back 1 day
                    
                    const sensorIds = new Set(data.map(reading => reading.sensor_id));

                    document.querySelectorAll('.listrowentry').forEach(entry => {
                        const sensorId = entry.getAttribute('data-sensor-id');
                        const readingElement = document.getElementById(`reading-${sensorId}`);
                        const statusElement = document.getElementById(`status-${sensorId}`);
                        
                        if (!sensorIds.has(parseInt(sensorId))) {
                            // Sensor is not in the latest readings, so it's offline
                            readingElement.innerHTML = '--';
                            statusElement.textContent = '💤';
                        }
                    });

                    data.forEach(reading => {
                        const readingElement = document.getElementById(`reading-${reading.sensor_id}`);
                        const statusElement = document.getElementById(`status-${reading.sensor_id}`);

                        let pstOffset = 17 * 60 * 60 * 1000;
                        let readingTime = new Date(new Date(reading.timestamp).getTime() - pstOffset);
                        

                        if (readingElement) {
                            const temperature = reading.temperature !== undefined ? reading.temperature.toFixed(2) : '--';
                            const humidity = reading.humidity !== undefined ? reading.humidity.toFixed(2) : '--';
                            const light = reading.light !== undefined ? reading.light.toFixed(2) : '--';

                            readingElement.innerHTML = `<span>🌡️ ${temperature}°C</span>
                                                        <span>💧 ${humidity}%</span>
                                                        <span>💡 ${light} lx</span>`;
                }

                        if (statusElement) {
                           
                            const timeDifference = (currentTime.getTime() - readingTime) / 1000; // difference in seconds
                            

                            if (timeDifference <= 25) {

                                
                                statusElement.textContent ='⚡'; 
                                // Update the readingElement with sensor values
                                if (readingElement) {
                            const temperature = reading.temperature !== undefined ? reading.temperature.toFixed(2) : '--';
                            const humidity = reading.humidity !== undefined ? reading.humidity.toFixed(2) : '--';
                            const light = reading.light !== undefined ? reading.light.toFixed(2) : '--';

                            readingElement.innerHTML = `<span>🌡️ ${temperature}°C</span>
                                                        <span>💧 ${humidity}%</span>
                                                        <span>💡 ${light} lx</span>`;
                        }                  
                            } else {
                              
                                statusElement.textContent ='💤';

                                if (readingElement) {
                                    readingElement.innerHTML = `<span>🌡️ --°C</span>
                                                                <span>💧 --%</span>
                                                                <span>💡 -- lx</span>`;
                    }

                            }
                        }
                    });
                })
                .catch(error => console.error('Error fetching latest readings:', error));
        };



        // Fetch the latest readings immediately and then every 10 seconds
        fetchLatestReadings();
        setInterval(fetchLatestReadings, 10000);
    });
    </script>
</body>
</html>
