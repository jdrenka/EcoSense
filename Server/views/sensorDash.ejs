<!DOCTYPE html>
<html>
<head>
    <!-- Standard favicon -->
    <link rel="icon" type="image/png" sizes="32x32" href="images/Ecosense_Icon.png">
    <link rel="icon" type="image/png" sizes="16x16" href="images/Ecosense_Icon.png">
    <!-- Apple Touch Icon for iOS -->
    <link rel="apple-touch-icon" sizes="180x180" href="images/Ecosense_Icon.png">
    <!-- Android Chrome -->
    <link rel="icon" type="image/png" sizes="192x192" href="images/Ecosense_Icon.png">
    <!-- Safari pinned tab icon -->
    <link rel="mask-icon" href="images/Ecosense_icon.png" color="#5bbad5">
    <title>EcoSense</title>
    <link rel='stylesheet' href='/styles.css'>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Jersey+25&family=Lobster&family=Lobster+Two:ital@1&family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <style>
        /* Hide the desktop date picker on mobile */
        @media (max-width: 768px) {
            .datetime-button {
                display: none;
            }
            .flatpickr-mobile {
                display: block !important;
                width: 10px;
                background-color: red;
            }
        }

        /* Hide the mobile date picker on desktop */
        @media (min-width: 769px) {
            .mobile-datetime-input {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div id="top-of-page"></div>

    <div class = 'topheader'>

        <a class='smallatag' href='/sensorview'>
            <h1 class='logotextinheader'><span class='withinlogo'>eco</span>Sense</h1>
        </a>
        <div class='navbar'>
       
            <button id='sensorviewbutton' class='navbuttons'>Sensors</button>
            <button id='createthreshold_button' class='navbuttons'>Alerts</button>
            <button id='helpbutton' class='navbuttons'>Help</button>
            <button class='navbuttons' id='logoutbutton'>Logout</button>
            <div class="triangle-cutout"></div>
        </div>

    </div>

    <div class='headerchunk'>
        <h1 class='text' id='sensorheader'><%= sensorName %></h1>
        <button id='createCalibrationButton' class='navbuttons' onclick="openCalibrationPopup()">Calibrate</button>
    </div>

<%- include('calibrationPopup.ejs') %>
    
    <div class='sensordisplay'>
        <div class='currentReadingsPanel'>
            <div class='topsection'>
                <div class='headerwithcountdown'>
                    <h2 class='stats' id='currentsensordisplay'>Current Sensor Data</h2>
                    <spa id='statusicon'><img id='statusicon' src="images/bolt.png" alt="Activen"></span>
                </div>
                <div class='timeandbolt'>
                    <p class='stats' id='timecontainer'>Last reading: <span id="time">--</span></p>
                    <span class='stats' id="countdown">10</span>
                </div>
            </div>
            <div class='bodysection'>
                <div class='tempbox'>
                    <p class='stats'>Temp: <span id="temperature">--</span></p>
                    <p class='stats'>Current Avg: <span class = 'avgsections' id='avgtemperature'>--</span></p>
                </div>
                <div class='humiditybox'>
                    <p class='stats'>Humidity: <span id="humidity">--</span></p>
                    <p class='stats'>Current Avg: <span class = 'avgsections' id='avghumidity'>--</span></p>
                </div>
                <div class='lightbox'>
                    <p class='stats'>Light: <span id="light">--</span></p>
                    <p class='stats'>Current Avg: <span class = 'avgsections' id='avglight'>--</span></p>
                </div>
                <div class='stats' id="displayVariable">Total Readings: <span id="variableValue">--</span></div>
                <div class='buttonsandcheck'>
                    <div class='buttonset'>
                        <button id="switchChartType">Line/Bar</button>
                        <button id="toggleDailyReport">View Data </button>
                    </div>
                    <div class='checkboxesgroup'>
                        <label class='checkflex'><input type="checkbox" id="showTemperature" checked> Show Temp</label>
                        <label class='checkflex'><input type="checkbox" id="showHumidity" checked> Show Hum</label>
                        <label class='checkflex'><input type="checkbox" id="showLight" checked> Show Light</label>
                    </div>
                </div>
            </div>
        </div>
        <canvas id="sensorChart" width="800" height="400"></canvas>
    </div>
    <div class='whiteline'></div>
    <div class='dailyReportSection'>
        <div id="dailyReportContainer" style="display: none;">
            <div class='reportheaderbunch'>
                <div class='dataviewheaderbunch'>
                    <h1 class='text' id='dailyreportheader'> Data Report</h1>
                    <h1 class='text' id='dataviewsensorname'><%= sensorName %></h1>
                </div>
                <div class='readingamountanddaterange'>
                    <div class='totalreadings'>
                        <h1 class='text' id='readingmessage'>Total readings: </h1>
                        <h1 class='text' id='dailyreport_readingcount'>--</h1>
                    </div>
                    <div class='daterange'>
                        <p id='plottingtext1'>Selected data from</p>
                        <div id="startButton" class="datetime-button">
                            <span id="startDateText">Select Start Date</span>
                            <span id="startTimeText"></span>
                        </div>
                        <input type="datetime-local" id="startMobile" class="flatpickr-input mobile-datetime-input" placeholder="˅">
                        <p id='plottingtext2'> to </p>
                        <div id="endButton" class="datetime-button">
                            <span id="endDateText">Select End Date</span>
                            <span id="endTimeText"></span>
                        </div>
                        <input type="datetime-local" id="endMobile" class="flatpickr-input mobile-datetime-input" placeholder="˅">
                    </div>
                </div>
                <div class='returntopgroup'>
                    <button id="returnTopButton">Return to Top</button>
                    <button id="downloadCSVButton">Download CSV</button>
                </div>
            </div>
            <canvas id="dailyReportChart"></canvas>
        </div>
    </div>

    <script>
        const UPDATE_TIME = 60; // seconds
        let sensorData = { timestamps: [], temperatures: [], humidities: [], lights: [] };
        let dailyData = { timestamps: [], temperatures: [], humidities: [], lights: [] };
        let currentChartType = 'line';
        let chart;
        let dailyReportChart;
        let maxDataPoints = 5000;
        let isConnected = false;
        let totalReadings = 0;
        const sensorId = "<%= sensorId %>";

        document.addEventListener('DOMContentLoaded', function() {
            const ctx = document.getElementById('sensorChart').getContext('2d');
            const dailyReportChartCtx = document.getElementById('dailyReportChart').getContext('2d');
            initCharts(ctx, dailyReportChartCtx);
            startCountdown();
            function openCalibrationPopup() {
            document.getElementById('calibrationPopup').style.display = 'block';
        }

        function closeCalibrationPopup() {
            document.getElementById('calibrationPopup').style.display = 'none';
        }
            setupEventListeners();
        });


        function initCharts(ctx, dailyReportChartCtx) {
            const datasetTemp = {
                label: 'Temperature (°C)',
                data: sensorData.temperatures,
                borderColor: 'rgb(255, 99, 132)',
                backgroundColor: currentChartType === 'bar' ? 'rgb(255, 99, 132)' : 'rgba(255, 99, 132, 0.5)',
                fill: false,
                hidden: !document.getElementById('showTemperature').checked,  // Initially set visibility based on checkbox
                pointRadius: 1.5  // Set point radius to half the default size
            };

            const datasetHumidity = {
                label: 'Humidity (%)',
                data: sensorData.humidities,
                borderColor: 'rgb(54, 162, 235)',
                backgroundColor: currentChartType === 'bar' ? 'rgb(54, 162, 235)' : 'rgba(54, 162, 235, 0.5)',
                fill: false,
                hidden: !document.getElementById('showHumidity').checked,  // Initially set visibility based on checkbox
                pointRadius: 1.5  // Set point radius to half the default size
            };

            const datasetLight = {
                label: 'Light (lx)',
                data: sensorData.lights,
                borderColor: 'rgb(255, 205, 86)',
                backgroundColor: currentChartType === 'bar' ? 'rgb(255, 205, 86)' : 'rgba(255, 205, 86, 0.5)',
                fill: false,
                hidden: !document.getElementById('showLight').checked,  // Initially set visibility based on checkbox
                pointRadius: 1.5  // Set point radius to half the default size
            };

            if (window.myLineChart instanceof Chart) {
                window.myLineChart.destroy();
            }

            if (window.dailyReportChart instanceof Chart) {
                window.dailyReportChart.destroy();
            }

            chart = new Chart(ctx, {
                type: currentChartType,
                data: {
                    labels: sensorData.timestamps,
                    datasets: [datasetTemp, datasetHumidity, datasetLight]
                },
                options: getChartOptions()
            });

            dailyReportChart = new Chart(dailyReportChartCtx, {
                type: 'line',
                data: {
                    labels: dailyData.timestamps,
                    datasets: [Object.assign({}, datasetTemp, { data: dailyData.temperatures }),
                               Object.assign({}, datasetHumidity, { data: dailyData.humidities }),
                               Object.assign({}, datasetLight, { data: dailyData.lights })]
                },
                options: getChartOptionsWithDate()
            });
        }

        function getChartOptions() {
            return {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        ticks: {
                            maxTicksLimit: 10,
                            color: 'white',
                            font: {
                                weight: 'bold',
                                size: 10 // Adjust font size to make it smaller
                            }
                        },
                        title: {
                            display: false,
                            text: 'Time',
                            color: 'white',
                            font: {
                                weight: 'bold',
                                size: 16
                            }
                        }
                    },
                    y: {
                        ticks: {
                            color: 'white',
                            font: {
                                weight: 'bold'
                            }
                        },
                        title: {
                            display: false,
                            text: 'Value',
                            color: 'white',
                            font: {
                                size: 50
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: 'white',
                            weight: 'bold',
                            font: {
                                weight: 'bold',
                                size: 15
                            }
                        }
                    }
                }
            };
        }

        function getChartOptionsWithDate() {
            return {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        ticks: {
                            callback: function(value, index, values) {
                                const date = this.getLabelForValue(value);
                                return date; // Display the date string
                            },
                            maxTicksLimit: 10,
                            color: 'white',
                            font: {
                                weight: 'bold',
                                size: 10 // Adjust font size to make it smaller
                            }
                        },
                        title: {
                            display: false,
                            text: 'Time',
                            color: 'white',
                            font: {
                                weight: 'bold',
                                size: 16
                            }
                        }
                    },
                    y: {
                        ticks: {
                            color: 'white',
                            font: {
                                weight: 'bold'
                            }
                        },
                        title: {
                            display: false,
                            text: 'Value',
                            color: 'white',
                            font: {
                                size: 50
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: 'white',
                            weight: 'bold',
                            font: {
                                weight: 'bold',
                                size: 15
                            }
                        }
                    }
                }
            };
        }

        function setupEventListeners() {
            const showTempCheckbox = document.getElementById('showTemperature');
            const showHumidityCheckbox = document.getElementById('showHumidity');
            const showLightCheckbox = document.getElementById('showLight');


            showTempCheckbox.addEventListener('change', function() {
                chart.data.datasets[0].hidden = !this.checked; // Toggle temperature dataset visibility
                chart.update();
            });

            showHumidityCheckbox.addEventListener('change', function() {
                chart.data.datasets[1].hidden = !this.checked; // Toggle humidity dataset visibility
                chart.update();
            });

            showLightCheckbox.addEventListener('change', function() {
                chart.data.datasets[2].hidden = !this.checked; // Toggle light dataset visibility
                chart.update();
            });

            const toggleButton = document.getElementById('toggleDailyReport');
            const dailyReportContainer = document.getElementById('dailyReportContainer');
            toggleButton.addEventListener('click', function() {
                const isVisible = dailyReportContainer.style.display !== 'none';
                if (!isVisible) {
                    dailyReportContainer.style.display = 'block';
                    toggleButton.textContent = 'Hide Data View';

                    // Scroll into view and adjust the position
                    setTimeout(() => {
                        dailyReportContainer.scrollIntoView({ behavior: 'smooth' });
                        setTimeout(() => {
                            const headerOffset = dailyReportContainer.getBoundingClientRect().top + window.scrollY + 300; // Adjust this value as needed
                            window.scrollTo({ top: headerOffset, behavior: 'smooth' });
                        }, 500); // Delay to ensure the initial scroll is complete
                    }, 10);
                } else {
                    dailyReportContainer.style.display = 'none';
                    toggleButton.textContent = 'View Data';
                }
            });

            const returnTopButton = document.getElementById('returnTopButton');
            returnTopButton.addEventListener('click', function() {
                document.getElementById('top-of-page').scrollIntoView({ behavior: 'smooth' });
                toggleButton.textContent = 'View Data';
                dailyReportContainer.style.display = 'none';
            });

            const switchChartTypeButton = document.getElementById('switchChartType');
            switchChartTypeButton.addEventListener('click', function() {
                currentChartType = (currentChartType === 'line') ? 'bar' : 'line';
                chart.destroy();
                initCharts(document.getElementById('sensorChart').getContext('2d'), document.getElementById('dailyReportChart').getContext('2d'));
                switchChartTypeButton.textContent = `Switch to ${currentChartType === 'line' ? 'Bar' : 'Line'} Chart`;
            });

            document.getElementById('sensorviewbutton').addEventListener('click', function() {
                window.location.href = '/sensorview';
            });

            const logoutButton = document.getElementById('logoutbutton');
            logoutButton.addEventListener('click', function() {
                window.location.href = '/logout';
            });

            const alertViewButton = document.getElementById('createthreshold_button');
            alertViewButton.addEventListener('click', function() {
                window.location.href = '/alertView';
            });

            const startButton = document.getElementById('startButton');
            const startDateText = document.getElementById('startDateText');
            const startTimeText = document.getElementById('startTimeText');

            const endButton = document.getElementById('endButton');
            const endDateText = document.getElementById('endDateText');
            const endTimeText = document.getElementById('endTimeText');

            const startPicker = flatpickr("#startButton", {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
                onClose: function(selectedDates, dateStr, instance) {
                    const [date, time] = dateStr.split(" ");
                    const formattedDate = new Date(dateStr).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
                    const formattedTime = new Date(dateStr).toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
                    startDateText.textContent = formattedDate;
                    startTimeText.textContent = formattedTime;
                    document.getElementById('startMobile').value = dateStr;  // Update mobile date picker value
                    updateReportChart();
                }
            });

            const endPicker = flatpickr("#endButton", {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
                onClose: function(selectedDates, dateStr, instance) {
                    const [date, time] = dateStr.split(" ");
                    const formattedDate = new Date(dateStr).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
                    const formattedTime = new Date(dateStr).toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
                    endDateText.textContent = formattedDate;
                    endTimeText.textContent = formattedTime;
                    document.getElementById('endMobile').value = dateStr;  // Update mobile date picker value
                    updateReportChart();
                }
            });

            const startMobileInput = document.getElementById('startMobile');
            const endMobileInput = document.getElementById('endMobile');

            startMobileInput.addEventListener('change', function() {
                const dateStr = this.value;
                const [date, time] = dateStr.split("T");
                const formattedDate = new Date(dateStr).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
                const formattedTime = new Date(dateStr).toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
                startDateText.textContent = formattedDate;
                startTimeText.textContent = formattedTime;
                updateReportChart();
            });

            endMobileInput.addEventListener('change', function() {
                const dateStr = this.value;
                const [date, time] = dateStr.split("T");
                const formattedDate = new Date(dateStr).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
                const formattedTime = new Date(dateStr).toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
                endDateText.textContent = formattedDate;
                endTimeText.textContent = formattedTime;
                updateReportChart();
            });

            document.addEventListener('click', function(event) {
                if (startPicker && !startPicker.calendarContainer.contains(event.target) && !startButton.contains(event.target)) {
                    startPicker.close();
                }
                if (endPicker && !endPicker.calendarContainer.contains(event.target) && !endButton.contains(event.target)) {
                    endPicker.close();
                }
            });

            document.getElementById('downloadCSVButton').addEventListener('click', async function() {
  const startDate = document.getElementById('startDateText').textContent + " " + document.getElementById('startTimeText').textContent;
  const endDate = document.getElementById('endDateText').textContent + " " + document.getElementById('endTimeText').textContent;

  let startDateTime;
  let endDateTime;

  if (startDate.trim() && endDate.trim() && endDate !== 'Select End Date') {
    startDateTime = new Date(startDate + ' GMT-0000').toISOString();
    endDateTime = new Date(endDate + ' GMT-0000').toISOString();
  } else {
    const today = new Date().toISOString().split('T')[0];
    startDateTime = `${today}T00:00:00.000Z`;
    endDateTime = `${today}T23:59:59.999Z`;
  }

  const csvUrl = `/download-csv?start=${encodeURIComponent(startDateTime)}&end=${encodeURIComponent(endDateTime)}&sensorId=${sensorId}`;

  try {
    const response = await fetch(csvUrl);

    // Check if the response is JSON
    const contentType = response.headers.get('Content-Type');
    if (contentType && contentType.includes('application/json')) {
      const result = await response.json();
      if (!result.success) {
        Swal.fire({
          icon: 'warning',
          title: 'No Data',
          text: result.message,
        });
      }
    } else {
      // Handle CSV download
      const blob = await response.blob();
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'data.csv';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An error occurred while trying to download the CSV.',
    });
  }
});

        }

        function fetchDailyDataAndUpdateChart() {
            fetch(`/daily-report?sensorId=${sensorId}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('dailyreport_readingcount').textContent = data.length;
                    dailyData.timestamps = data.map(entry => new Date(entry.timestamp).toLocaleString('en-US', { month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true }));  // Use toLocaleString to include date and time
                    dailyData.temperatures = data.map(entry => entry.temperature);
                    dailyData.humidities = data.map(entry => entry.humidity);
                    dailyData.lights = data.map(entry => entry.light);
                    dailyReportChart.data.labels = dailyData.timestamps;
                    dailyReportChart.data.datasets[0].data = dailyData.temperatures;
                    dailyReportChart.data.datasets[1].data = dailyData.humidities;
                    dailyReportChart.data.datasets[2].data = dailyData.lights;
                    dailyReportChart.update();
                })
                .catch(error => console.error('Failed to fetch daily report data:', error));
        }

        function startCountdown() {
            fetchData();
            let counter = UPDATE_TIME;
            const countdownElement = document.getElementById('countdown');
            countdownElement.textContent = `(${counter})`;
            interval = setInterval(() => {
                if (--counter <= 0) {
                    fetchData();
                    counter = UPDATE_TIME;
                }
                if (isConnected) {
                    countdownElement.textContent = `(${counter})`;
                } else {
                    
                    document.getElementById('statusicon').innerHTML = '💤';
                    countdownElement.textContent = '⛔';
                }
            }, 1000);
        }

        function fetchData() {
    fetch(`/recentData/${sensorId}`)
        .then(response => response.json())
        .then(data => {

            let currentTime = new Date(new Date().getTime() - (24 * 60 * 60 * 1000)); // Go back one day

            let dataTime = new Date(data.timestamp);

            let pstOffset = 17 * 60 * 60 * 1000; // Adjust for PDT (7 hours behind UTC)
                
                dataTime = new Date(dataTime.getTime() - pstOffset);

            // Calculate the time difference in milliseconds
            let timeDifference = (currentTime - dataTime.getTime()) / 1000; // convert to seconds

            if (sensorId == data.sensor_id && timeDifference < UPDATE_TIME * 2) {
                if (!isConnected) {
                    isConnected = true;
                    document.getElementById('statusicon').innerHTML = '<img id="statusicon" src="images/bolt.png" alt="Active">';
                }
                
                let timestamp = dataTime.toLocaleTimeString([], { hour: 'numeric', minute: 'numeric', hour12: true });
                chart.data.labels.push(timestamp);
                chart.data.datasets[0].data.push(data.temperature);
                chart.data.datasets[1].data.push(data.humidity);
                chart.data.datasets[2].data.push(data.light);
                chart.update();

                let avgTemp = findAvg(chart.data.datasets[0].data);
                let avgHum = findAvg(chart.data.datasets[1].data);
                let avgLight = findAvg(chart.data.datasets[2].data);
                document.getElementById('temperature').textContent = `${data.temperature.toFixed(2)}°C`;
                document.getElementById('avgtemperature').textContent = `${avgTemp}°C`;
                document.getElementById('avghumidity').textContent = `${avgHum}%`;
                document.getElementById('avglight').textContent = `${avgLight} lx`;
                document.getElementById('humidity').textContent = `${data.humidity.toFixed(2)}%`;
                document.getElementById('light').textContent = `${data.light.toFixed(2)} lx`;
                document.getElementById('time').textContent = timestamp;
                document.getElementById('variableValue').textContent = ++totalReadings;
            } else {
                if (isConnected) {
                    isConnected = false;
                    document.getElementById('statusicon').innerHTML = '💤';
                    document.getElementById('countdown').textContent = '⛔';
                }
            }
        })
        .catch(error => {
            console.error('Error fetching data:', error);
            document.getElementById('countdown').textContent = 'Paused';
            
        });
}

        function findAvg(dataList) {
            if (dataList.length === 0) return 0;
            const sum = dataList.reduce((a, b) => a + b, 0);
            return (sum / dataList.length).toFixed(1);  // Calculate and format average
        }

        function updateReportChart() {
            const startDate = document.getElementById('startDateText').textContent + " " + document.getElementById('startTimeText').textContent;
            const endDate = document.getElementById('endDateText').textContent + " " + document.getElementById('endTimeText').textContent;

            if (startDate.trim() && endDate.trim() && endDate !== 'Select End Date') {
                console.log('Fetching data for range:', startDate, endDate, sensorId); // Debug log

                // Parse the selected dates to local time before converting to ISO string
                const startDateTime = new Date(startDate + ' GMT-0000').toISOString();
                const endDateTime = new Date(endDate + ' GMT-0000').toISOString();

                fetchRangeData(startDateTime, endDateTime);
            }
        }

        function fetchRangeData(startDateTime, endDateTime) {
            fetch(`/range-report?start=${encodeURIComponent(startDateTime)}&end=${encodeURIComponent(endDateTime)}&sensorId=${sensorId}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('dailyreport_readingcount').textContent = data.length;

                    dailyData.timestamps = data.map(entry => {
    let dataTime = new Date(entry.timestamp);
    let offset = 7 * 60 * 60 * 1000; 
    dataTime = new Date(dataTime.getTime() + offset);

    // Manually format the date
    const options = { month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true };
    return dataTime.toLocaleString('en-US', options);
}); 
                    dailyData.temperatures = data.map(entry => entry.temperature);
                    dailyData.humidities = data.map(entry => entry.humidity);
                    dailyData.lights = data.map(entry => entry.light);
                    dailyReportChart.data.labels = dailyData.timestamps;
                    dailyReportChart.data.datasets[0].data = dailyData.temperatures;
                    dailyReportChart.data.datasets[1].data = dailyData.humidities;
                    dailyReportChart.data.datasets[2].data = dailyData.lights;
                    dailyReportChart.update();
                })
                .catch(error => console.error('Failed to fetch range report data:', error));
        }
    </script>
</body>
</html>
