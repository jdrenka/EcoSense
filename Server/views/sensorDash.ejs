<!DOCTYPE html>
<html>
<head>
    <title>IOT Dashboard</title>
    <link rel='stylesheet' href='/styles.css'>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class='navbar'>
        <h1 class='text'>Sensor Dashboard</h1>
        <h1 class='text'>Welcome User!</h1>
    </div>

    <h1 class='text'>Greenhouse Sensor (GH4124):</h1>
<div class = 'sensordisplay'>
    <div class='currentReadingsPanel'>
        <div class='topsection'>
            <h1 id='currentsensordisplay'>Current Sensor Data</h1>
            <p id='timecontainer'>Time: <span id="time">--</span></p>
        </div>
        
        <div class='bodysection'>
            <p>Temperature: <span id="temperature">--</span>°C</p>
            <p>Humidity: <span id="humidity">--</span>%</p>
            <p>Next update in: <span id="countdown">10</span> seconds</p>
        </div>
    </div>
    <canvas id="sensorChart" width="800" height="400"></canvas>
</div>
    
    <!-- Canvas for Chart.js -->
    

    <script>
        const UPDATE_TIME = 10; // seconds
        let sensorData = { timestamps: [], temperatures: [], humidities: [] };
        let sensorChart;

        document.addEventListener('DOMContentLoaded', function () {
            const countdownElement = document.getElementById('countdown');
            const temperatureElement = document.getElementById('temperature');
            const humidityElement = document.getElementById('humidity');
            const timeElement = document.getElementById('time');
            let interval;

            function initChart() {
                const ctx = document.getElementById('sensorChart').getContext('2d');
                sensorChart = new Chart(ctx, {
    type: 'line',
    data: {
        labels: sensorData.timestamps,
        datasets: [{
            label: 'Temperature (°C)',
            data: sensorData.temperatures,
            borderColor: 'rgb(255, 99, 132)',
            fill: false
        }, {
            label: 'Humidity (%)',
            data: sensorData.humidities,
            borderColor: 'rgb(54, 162, 235)',
            fill: false
        }]
    },
    options: {
        responsive: true, // Ensure the chart is responsive
        maintainAspectRatio: false, // Allows the chart to scale in height independently from width
        scales: {
            x: { display: true },
            y: { display: true }
        }
    }
});
            }

            function updateChart(data) {
                sensorChart.data.labels = data.timestamps;
                sensorChart.data.datasets[0].data = data.temperatures;
                sensorChart.data.datasets[1].data = data.humidities;
                sensorChart.update();
            }

            async function fetchData() {
                try {
                    const response = await fetch('/recentData');
                    if (!response.ok) { 
                        throw new Error('Network response was not ok.');
                    }
                    const data = await response.json();
                    let datetime = new Date(data.timestamp);
                    let formattedTime = datetime.toLocaleDateString() + " " + datetime.toLocaleTimeString();

                    // Update sensor data for chart
                    sensorData.timestamps.push(formattedTime);
                    sensorData.temperatures.push(data.temperature);
                    sensorData.humidities.push(data.humidity);

                    // Limit the data to prevent memory issues
                    if (sensorData.timestamps.length > 20) {
                        sensorData.timestamps.shift();
                        sensorData.temperatures.shift();
                        sensorData.humidities.shift();
                    }

                    // Update HTML elements
                    temperatureElement.textContent = data.temperature + '°C';
                    humidityElement.textContent = data.humidity + '%';
                    timeElement.textContent = formattedTime;

                    // Update Chart
                    updateChart(sensorData);

                } catch (error) {
                    console.error('Error fetching data:', error);
                    countdownElement.textContent = 'Paused'; // Show paused state in UI
                    clearInterval(interval); // Stop the countdown interval
                }
            }

            function startCountdown() {
                let counter = UPDATE_TIME;
                countdownElement.textContent = counter; //update countdown
                interval = setInterval(() => {
                    counter--;
                    countdownElement.textContent = counter;
                    if (counter <= 0) {
                        clearInterval(interval);
                        fetchData();
                        startCountdown(); // Restart countdown after data fetch
                    }
                }, 1000);
            }

            initChart();
            fetchData(); // Initial data fetch
            startCountdown(); // Start the countdown
        });
    </script>

</body>
</html>
