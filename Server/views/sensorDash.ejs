<!DOCTYPE html>
<html>
<head>
    <title>IOT Dashboard</title>
    <link rel='stylesheet' href='/styles.css'>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body> 

    <div id="top-of-page"></div>

    <div class='navbar'>
        <a class = 'smallatag' href = '/sensorview'>
            <img href = 'sensorDash.ejs' src='images/logo.png' id='logopic'>
        </a>
        <button id='sensorviewbutton' class='navbuttons'>View Sensors</button>
        <button id='helpbutton' class='navbuttons'>Help</button>
        <button class='navbuttons' id='logoutbutton'>Logout</button>
    </div>

    <div class = 'headerchunk'>
        <h1 class='text' id='sensorheader'><%= sensorName %></h1>
        <a id = 'createthreshold_button'>Manage Sensor Thresholds</a>
    </div>
    
    <div class='sensordisplay'>
        <div class='currentReadingsPanel'>
            <div class='topsection'>
                <div class='headerwithcountdown'>
                    <h1 class='stats' id='currentsensordisplay'>Current Sensor Data</h1>
                    <span id='statusicon'><img id='statusicon' src="images/bolt.png" alt="Active"></span>
                </div>
                <div class='timeandbolt'>
                    <p class='stats' id='timecontainer'>Last reading: <span id="time">--</span></p>
                    <span class='stats' id="countdown">10</span> 
                </div>
            </div>
            
            <div class='bodysection'>
                <div class='tempbox'>
                    <p class='stats'>Temperature: <span id="temperature">--</span></p>
                    <p class='stats'>Current Avg: <span id='avgtemperature'>--</span></p>
                </div>
                
                <div class='humiditybox'>
                    <p class='stats'>Humidity: <span id="humidity">--</span></p>
                    <p class='stats'>Current Avg: <span id='avghumidity'>--</span></p>
                </div>

                <div class='lightbox'>
                    <p class='stats'>Light: <span id="light">--</span></p>
                    <p class='stats'>Current Avg: <span id='avglight'>--</span></p>
                </div>
                
                <div class='stats' id="displayVariable">Total Readings: <span id="variableValue">--</span></div>
               
                <div class ='buttonsandcheck'>
                    <div class ='buttonset'>
                        <button id="switchChartType">Line/Bar</button>
                        <button id="toggleDailyReport">Get Daily Report</button>
                        <button id="pauseButton">Pause</button>
                    </div>

                    <div class = 'checkboxesgroup'>
                        <label class = 'checkflex'><input type="checkbox" id="showTemperature" checked> Show Temp</label>
                        <label class = 'checkflex'><input  type="checkbox" id="showHumidity" checked> Show Hum</label>
                        <label class = 'checkflex'><input  type="checkbox" id="showLight" checked> Show Light</label>
                    </div>
                </div>
            </div>
        </div>
        <canvas id="sensorChart" width="800" height="400"></canvas>
    </div>
    <br>
    <br>
    <br>
    <br>
    <div class='dailyReportSection'>
        <div id="dailyReportContainer" style="display: none;">
            <div class='reportheaderbunch'>
                <h1 class='text' id='dailyreportheader'> Daily Report:</h1>
                <h1 class = 'text' id = 'readingmessage'>Total readings: </h1>
                <h1 class = 'text' id = 'dailyreport_readingcount'>--</h1>
                <button id="returnTopButton">Return to Top</button>
            </div>
            <canvas id="dailyReportChart"></canvas>
        </div>
    </div>

    <script>
        const UPDATE_TIME = 10; // seconds
        let sensorData = { timestamps: [], temperatures: [], humidities: [] };
        let currentChartType = 'line';
        let chart;
        let dailyReportChart;
        let maxDataPoints = 5000;
        let isPaused = false;
        let totalReadings = 0;
        const sensorId = "<%= sensorId %>";

        document.addEventListener('DOMContentLoaded', function() {
            const ctx = document.getElementById('sensorChart').getContext('2d');
            const dailyReportChartCtx = document.getElementById('dailyReportChart').getContext('2d');
            initCharts(ctx, dailyReportChartCtx);
            startCountdown();
            setupEventListeners();
        });

        function initCharts(ctx, dailyReportChartCtx) {
            const datasetTemp = {
                label: 'Temperature (Â°C)',
                data: sensorData.temperatures,
                borderColor: 'rgb(255, 99, 132)',
                backgroundColor: currentChartType === 'bar' ? 'rgb(255, 99, 132)' : 'rgba(255, 99, 132, 0.5)',
                fill: false,
                hidden: !document.getElementById('showTemperature').checked  // Initially set visibility based on checkbox
            };

            const datasetHumidity = {
                label: 'Humidity (%)',
                data: sensorData.humidities,
                borderColor: 'rgb(54, 162, 235)',
                backgroundColor: currentChartType === 'bar' ? 'rgb(54, 162, 235)' : 'rgba(54, 162, 235, 0.5)',
                fill: false,
                hidden: !document.getElementById('showHumidity').checked  // Initially set visibility based on checkbox
            };

            if (window.myLineChart instanceof Chart) {
                window.myLineChart.destroy();
            }

            if (window.dailyReportChart instanceof Chart) {
                window.dailyReportChart.destroy();
            }

            chart = new Chart(ctx, {
                type: currentChartType,
                data: {
                    labels: sensorData.timestamps,
                    datasets: [datasetTemp, datasetHumidity]
                },
                options: getChartOptions()
            });

            dailyReportChart = new Chart(dailyReportChartCtx, {
                type: 'line',
                data: {
                    labels: sensorData.timestamps,
                    datasets: [datasetTemp, datasetHumidity]
                },
                options: getChartOptions()
            });
        }

        function getChartOptions() {
            return {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        ticks: {
                            maxTicksLimit: 10,
                            color: 'white',
                            font: {
                                weight: 'bold'
                            }
                        },
                        title: {
                            display: false,
                            text: 'Time',
                            color: 'white',
                            font: {
                                weight: 'bold',
                                size: 16
                            }
                        }
                    },
                    y: {
                        ticks: {
                            color: 'white',
                            font: {
                                weight: 'bold'
                            }
                        },
                        title: {
                            display: false,
                            text: 'Value',
                            color: 'white',
                            font: {
                                size: 50
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: 'white',
                            weight: 'bold',
                            font: {
                                weight: 'bold',
                                size: 15
                            }
                        }
                    }
                }
            };
        }

        function setupEventListeners() {
            const showTempCheckbox = document.getElementById('showTemperature');
            const showHumidityCheckbox = document.getElementById('showHumidity');

            showTempCheckbox.addEventListener('change', function() {
                chart.data.datasets[0].hidden = !this.checked; // Toggle temperature dataset visibility
                chart.update();
            });

            showHumidityCheckbox.addEventListener('change', function() {
                chart.data.datasets[1].hidden = !this.checked; // Toggle humidity dataset visibility
                chart.update();
            });

            const toggleButton = document.getElementById('toggleDailyReport');
            const dailyReportContainer = document.getElementById('dailyReportContainer');
            toggleButton.addEventListener('click', function() {
                const isVisible = dailyReportContainer.style.display !== 'none';
                if (!isVisible) {
                    setTimeout(() => {
                        dailyReportContainer.scrollIntoView({ behavior: 'smooth' });
                    }, 10);
                }
                if (dailyReportContainer.style.display === 'none') {
                    dailyReportContainer.style.display = 'block';
                    toggleButton.textContent = 'Hide Daily Report';
                    fetchDailyDataAndUpdateChart();
                } else {
                    dailyReportContainer.style.display = 'none';
                    toggleButton.textContent = 'Get Daily Report';
                }
            });

            const returnTopButton = document.getElementById('returnTopButton');
            returnTopButton.addEventListener('click', function() {
                document.getElementById('top-of-page').scrollIntoView({ behavior: 'smooth' });
                toggleButton.textContent = 'Get Daily Report';
                dailyReportContainer.style.display = 'none';
            });

            const pauseButton = document.getElementById('pauseButton');
            pauseButton.addEventListener('click', function() {
                isPaused = !isPaused;
                if (isPaused) {
                    clearInterval(interval);
                    pauseButton.textContent = "Restart Sensor";
                    pauseButton.style.backgroundColor = "green";
                    document.getElementById('statusicon').innerHTML = 'ð¤';
                } else {
                    pauseButton.textContent = "Pause";
                    pauseButton.style.backgroundColor = "#2b2a2a";
                    document.getElementById('statusicon').innerHTML = '<img id = "statusicon" src="images/bolt.png" alt="Active">';
                    startCountdown();
                }
            });

            const switchChartTypeButton = document.getElementById('switchChartType');
            switchChartTypeButton.addEventListener('click', function() {
                currentChartType = (currentChartType === 'line') ? 'bar' : 'line';
                chart.destroy();
                initCharts(document.getElementById('sensorChart').getContext('2d'), document.getElementById('dailyReportChart').getContext('2d'));
                switchChartTypeButton.textContent = `Switch to ${currentChartType === 'line' ? 'Bar' : 'Line'} Chart`;
            });

            document.getElementById('sensorviewbutton').addEventListener('click', function() {
                window.location.href = '/sensorview';
            });

            const logoutButton = document.getElementById('logoutbutton');
            logoutButton.addEventListener('click', function() {
                window.location.href = '/logout';
            });
        }

        function fetchDailyDataAndUpdateChart() {
            fetch('/daily-report')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('dailyreport_readingcount').textContent = data.length;
                    dailyReportChart.data.labels = data.map(entry => new Date(entry.timestamp).toLocaleTimeString());
                    dailyReportChart.data.datasets[0].data = data.map(entry => entry.temperature);
                    dailyReportChart.data.datasets[1].data = data.map(entry => entry.humidity);
                    dailyReportChart.update();
                })
                .catch(error => console.error('Failed to fetch daily report data:', error));
        }

        function startCountdown() {
            fetchData();
            let counter = UPDATE_TIME;
            const countdownElement = document.getElementById('countdown');
            countdownElement.textContent = `(${counter})`;
            interval = setInterval(() => {
                if (--counter <= 0) {
                    fetchData();
                    counter = UPDATE_TIME;
                }
                countdownElement.textContent = `(${counter})`;
            }, 1000);
        }

        function fetchData() {
            if (!isPaused) {
                fetch(`/recentData/${sensorId}`)
                    .then(response => response.json())
                    .then(data => {
                    if(sensorId == data.sensor_id){ //Condition check if the sensorids match
                        let timestamp = new Date(data.timestamp);
                        timestamp.setHours(timestamp.getHours() + 1); //add 1 extra hour to calibrate
                        const formattedTime = timestamp.toLocaleTimeString();
                        chart.data.labels.push(formattedTime);
                        chart.data.datasets[0].data.push(data.temperature);
                        chart.data.datasets[1].data.push(data.humidity);
                        chart.update();

                        let avgTemp = findAvg(chart.data.datasets[0].data);
                        let avgHum = findAvg(chart.data.datasets[1].data);
                        document.getElementById('temperature').textContent = `${data.temperature.toFixed(2)}Â°C`;
                        document.getElementById('avgtemperature').textContent = `${avgTemp}Â°C`;
                        document.getElementById('avghumidity').textContent = `${avgHum}%`;
                        document.getElementById('humidity').textContent = `${data.humidity.toFixed(2)}%`;
                        document.getElementById('time').textContent = formattedTime;
                        document.getElementById('variableValue').textContent = ++totalReadings;
                    }
                    })
                    .catch(error => {
                        console.error('Error fetching data:', error);
                        document.getElementById('countdown').textContent = 'Paused';
                        clearInterval(interval);
                    });
            }
        }

        function findAvg(dataList) {
            const sum = dataList.reduce((a, b) => a + b, 0);
            return (sum / dataList.length).toFixed(1);  // Calculate and format average
        }

    </script>
</body>
</html>
