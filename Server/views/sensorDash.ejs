<!DOCTYPE html>
<html>
<head>
    <title>IOT Dashboard</title>
    <link rel='stylesheet' href='/styles.css'>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>

    <div id="top-of-page"></div>

    <div class='navbar'>
        
    </div>

    <h1 class='text' id = 'sensorheader'>Greenhouse Sensor (GH4124):</h1>
    <div class='sensordisplay'>
        <div class='currentReadingsPanel'>
            <div class='topsection'>
                <div class='headerwithcountdown'>
                    <h1 class = 'stats' id='currentsensordisplay'>Current Sensor Data</h1>
                    <span id='statusicon'><img id = statusicon src="images/bolt.png" alt="Active"></span>
                </div>
                <div class='timeandbolt'>
                    <p class = 'stats' id='timecontainer'>Last reading: <span id="time">--</span></p>
                    <span class = 'stats' id="countdown">10</span> 
                </div>
            </div>
            
            <div class='bodysection'>
                

                <div class = 'tempbox'>
                    <p class = 'stats'>Temperature: <span id="temperature">--</span></p>
                    <p class = 'stats'>Current Avg: <span id = 'avgtemperature'>--</span></p>
                </div>
                <br>
                 <div class = 'humiditybox'>
                    <p class = 'stats'>Humidity: <span id="humidity">--</span></p>
                    <p class = 'stats'>Current Avg: <span id = 'avghumidity'>--</span></p>
                </div>
                
                <div class = 'stats' id="displayVariable">Total Readings: <span id="variableValue">--</span></div>
                <button id="switchChartType">Line/Bar</button>
                <button id="toggleDailyReport">Get Daily Report</button>
                <button id="pauseButton">Pause</button>
            </div>
        </div>
        <canvas id="sensorChart" width="800" height="400"></canvas>
    </div>
    <br>
    <br>
    <br>
    <br>
    <div class='dailyReportSection'>
        <div id="dailyReportContainer" style="display: none;">

            <div class = 'reportheaderbunch'>
                <h1 class = 'text' id = 'dailyreportheader'> Daily Report:</h1>
                <h1 class = 'text' id = 'currentDate'></h1>
                <button id="returnTopButton">Return to Top</button>

            </div>
            <canvas id="dailyReportChart"></canvas>
        </div>
    </div>

    <script>
        const UPDATE_TIME = 5; // seconds
        let sensorData = { timestamps: [], temperatures: [], humidities: [] };
        let currentChartType = 'line';
        let chart;
        let dailyReportChart;
        let maxDataPoints = 100;
        let isPaused = false;
        let totalReadings = 0;

        document.addEventListener('DOMContentLoaded', function() {
            const ctx = document.getElementById('sensorChart').getContext('2d');
            const dailyReportChartCtx = document.getElementById('dailyReportChart').getContext('2d');
            initCharts(ctx, dailyReportChartCtx);
            setupEventListeners();
            startCountdown();
        });

        function initCharts(ctx, dailyReportChartCtx) {

            if (window.myLineChart && window.myLineChart instanceof Chart) {
        window.myLineChart.destroy();
    }

    // Check if the daily report chart exists and is a Chart instance before destroying it
    if (window.dailyReportChart && window.dailyReportChart instanceof Chart) {
        window.dailyReportChart.destroy();
    }


            chart = new Chart(ctx, {
                type: currentChartType,
                data: getChartData(),
                options: getChartOptions()
            });
            dailyReportChart = new Chart(dailyReportChartCtx, {
                type: 'line',
                data: getChartData(),
                options: getChartOptions()
            });
        }

        function getChartData() {
            return {
                labels: sensorData.timestamps,
                datasets: [{
                    label: 'Temperature (Â°C)',
                    data: sensorData.temperatures,
                    borderColor: 'rgb(255, 99, 132)',
                    backgroundColor: currentChartType === 'bar' ? 'rgb(255, 99, 132)' : 'rgba(255, 99, 132, 0.5)',
                    fill: false
                }, {
                    label: 'Humidity (%)',
                    data: sensorData.humidities,
                    borderColor: 'rgb(54, 162, 235)',
                    backgroundColor: currentChartType === 'bar' ? 'rgb(54, 162, 235)' : 'rgba(54, 162, 235, 0.5)',
                    fill: false
                }]
            };
        }

        const currentDateElement = document.getElementById('currentDate');
        const today = new Date(); // Get the current date and time
        const dateString = today.toLocaleDateString('en-US', {
            weekday: 'long', // "Monday"
            year: 'numeric', // "2021"
            month: 'long', // "July"
            day: 'numeric' // "20"
        });
        currentDateElement.textContent = dateString;

        function getChartOptions() {
    return {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            x: {
                ticks: {
                    maxTicksLimit: 10,
                    color: 'white',
                    font: {
                        weight: 'bold'
                    }
                },
                title: {
                    display: false,
                    text: 'Time',
                    color: 'white',
                    font: {
                        weight: 'bold',
                        size: 16
                    }
                }
            },
            y: {
                ticks: {
                    color: 'white',
                    font: {
                        weight: 'bold'
                    }
                },
                title: {
                    display: false,
                    text: 'Value',
                    color: 'white',
                    font: {
                        size: 50
                    }
                }
            }
        },
        plugins: {
            legend: {
                labels: {
                    color: 'white',
                    weight: 'bold',
                    font: {
                        weight: 'bold',
                        size: 15
                    }
                }
            }
        }
    };
}

        function setupEventListeners() {


            
            const toggleButton = document.getElementById('toggleDailyReport');
            const dailyReportContainer = document.getElementById('dailyReportContainer');
            toggleButton.addEventListener('click', function() {
            const isVisible = dailyReportContainer.style.display !== 'none';

                if (!isVisible) {
                // Delay the scroll slightly to ensure the DOM has updated
                setTimeout(() => {
                    dailyReportContainer.scrollIntoView({ behavior: 'smooth' });
                }, 10);
                }

                if (dailyReportContainer.style.display === 'none') {
                    dailyReportContainer.style.display = 'block';
                    toggleButton.textContent = 'Hide Daily Report';
                    fetchDailyDataAndUpdateChart();
                } else {
                    dailyReportContainer.style.display = 'none';
                    toggleButton.textContent = 'Get Daily Report';
                }
            });


            returnTopButton.addEventListener('click', function() {
    document.getElementById('top-of-page').scrollIntoView({ behavior: 'smooth' });
    toggleButton.textContent = 'Get Daily Report';
    dailyReportContainer.style.display = 'none';
});

            const pauseButton = document.getElementById('pauseButton');
            pauseButton.addEventListener('click', function() {
                isPaused = !isPaused;
                if (isPaused) {
                    clearInterval(interval);
                    pauseButton.textContent = "Restart Sensor";
                    pauseButton.style.backgroundColor = "green";
                    document.getElementById('statusicon').innerHTML = 'ðŸ’¤';
                } else {
                    pauseButton.textContent = "Pause";
                    pauseButton.style.backgroundColor = "#d61c5a";
                    document.getElementById('statusicon').innerHTML = '<img id = "statusicon" src="images/bolt.png" alt="Active">';
                    startCountdown();
                }
            });

            const switchChartTypeButton = document.getElementById('switchChartType');
            switchChartTypeButton.addEventListener('click', function() {
                currentChartType = (currentChartType === 'line') ? 'bar' : 'line';
                chart.destroy();
                initCharts(document.getElementById('sensorChart').getContext('2d'), document.getElementById('dailyReportChart').getContext('2d'));
                switchChartTypeButton.textContent = `Switch to ${currentChartType === 'line' ? 'Bar' : 'Line'} Chart`;
            });


        }

        

        function fetchDailyDataAndUpdateChart() {
            fetch('/daily-report')
                .then(response => response.json())
                .then(data => {
                    dailyReportChart.data.labels = data.map(entry => new Date(entry.timestamp).toLocaleTimeString());
                    dailyReportChart.data.datasets[0].data = data.map(entry => entry.temperature);
                    dailyReportChart.data.datasets[1].data = data.map(entry => entry.humidity);
                    dailyReportChart.update();
                })
                .catch(error => console.error('Failed to fetch daily report data:', error));
        }

        function startCountdown() {
            let counter = UPDATE_TIME;
            const countdownElement = document.getElementById('countdown');
            countdownElement.textContent = `(${counter})`;
            interval = setInterval(() => {
                if (--counter <= 0) {
                    fetchData();
                    counter = UPDATE_TIME;
                }
                countdownElement.textContent = `(${counter})`;
            }, 1000);
        }
        function formatDate(timestamp) {
    // Example timestamp: "2024-04-08T23:25:00Z"
    let date = new Date(timestamp);
    let month = (date.getMonth() + 1).toString().padStart(2, '0');  // Get month and pad with zero if necessary
    let day = date.getDate().toString().padStart(2, '0');           // Get day and pad with zero if necessary
    let hour = date.getHours();
    let minute = date.getMinutes().toString().padStart(2, '0');     // Pad minute with zero
    let ampm = hour >= 12 ? 'PM' : 'AM';                            // Determine AM/PM

    hour = hour % 12;
    hour = hour ? hour : 12; // Convert 0 hour to 12 for 12-hour format

    // Build the custom formatted date string
    return `${month}-${day} ${hour}:${minute} ${ampm}`;
}

        function fetchData() {
            if (!isPaused) {
                fetch('/recentData')
                    .then(response => response.json())
                    .then(data => {
                        const formattedTime = new Date(data.timestamp).toLocaleTimeString();
                        data.timestamp = formatDate(data.timestamp);                   
                        chart.data.labels.push(data.timestamp);
                        chart.data.datasets[0].data.push(data.temperature);
                        chart.data.datasets[1].data.push(data.humidity);
                        chart.update();
                        
                        let avgTemp = findAvg(chart.data.datasets[0].data); // Calculate avgTemp using helper func, From current dataset
                        let avgHum = findAvg(chart.data.datasets[1].data);
                        document.getElementById('temperature').textContent = `${data.temperature}Â°C`;
                        document.getElementById('avgtemperature').textContent = `${avgTemp}Â°C`;
                        document.getElementById('avghumidity').textContent = `${avgHum}%`; 
                        document.getElementById('humidity').textContent = `${data.humidity}%`;
                        document.getElementById('time').textContent = formattedTime;
                        document.getElementById('variableValue').textContent = ++totalReadings;
                    })
                    .catch(error => {
                        console.error('Error fetching data:', error);
                        document.getElementById('countdown').textContent = 'Paused';
                        clearInterval(interval);
                    });
            }
        }


        function findAvg(tempList){
            let sum = 0;
            for(let i = 0; i < tempList.length; i++){
                sum += tempList[i]; 
            }
            //format 
            let formattedAverage = (sum / tempList.length).toFixed(1); 
            return formattedAverage;
        }

    </script>
</body>
</html>
